/**
 * @fileoverview Firestore Security Rules for CrewUp Platform
 *
 * Core Philosophy:
 * This ruleset enforces a mix of user-ownership and shared-access models. User profiles are strictly controlled by their respective owners.
 * Opportunities are publicly readable but writable only by their authors. Teams are secured via closed collaborator pattern.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, accessible only by the user themselves.
 * - /opportunities/{opportunityId}: Opportunity postings, publicly readable, writable only by the author.
 * - /teams/{teamId}: Team data, accessible only by team members.
 * - /teams/{teamId}/messages/{messageId}: Chat messages within a team, accessible only by team members.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted to the `/opportunities` collection but creation, update, and delete operations are restricted to the owner.
 * - The default security posture for ambiguous relationships is strict owner-only access.
 *
 * Denormalization for Authorization:
 * - Opportunities store `authorId` to quickly determine the creator.
 * - Teams store `memberIds` to easily check team membership.
 *
 * Structural Segregation:
 * - User profiles and opportunities are stored in separate top-level collections to allow for different read access patterns.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     *   request.auth.uid == 'user123' && request.resource.data.id == 'user123'
     * @allow (get, update, delete) User with ID 'user123' can read/write their own profile.
     *   request.auth.uid == 'user123'
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     *   request.auth.uid == 'user456' && request.resource.data.id == 'user123'
     * @deny (get, update, delete) User with ID 'user456' cannot read/write the profile of 'user123'.
     *   request.auth.uid == 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to opportunities, but restricts writes to the author.
     * @path /opportunities/{opportunityId}
     * @allow (get, list) Any user can read any opportunity.
     *   true
     * @allow (create) User with ID 'user123' can create an opportunity with authorId 'user123'.
     *   request.auth.uid == 'user123' && request.resource.data.authorId == 'user123'
     * @allow (update, delete) User with ID 'user123' can update/delete their own opportunity (where authorId is 'user123').
     *   request.auth.uid == 'user123' && resource.data.authorId == 'user123'
     * @deny (create) User with ID 'user456' cannot create an opportunity with authorId 'user123'.
     *   request.auth.uid == 'user456' && request.resource.data.authorId == 'user123'
     * @deny (update, delete) User with ID 'user456' cannot update/delete the opportunity of 'user123' (where authorId is 'user123').
     *   request.auth.uid == 'user456' && resource.data.authorId == 'user123'
     * @principle Allows public read access but enforces document ownership for writes.
     */
    match /opportunities/{opportunityId} {
      function isOwner(authorId) {
        return request.auth != null && request.auth.uid == authorId;
      }

       function isExistingOwner(authorId) {
        return isOwner(authorId) && resource != null;
      }

      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Enforces shared access for teams based on membership.
     * @path /teams/{teamId}
     * @allow (get, list) User with ID 'user123' can read a team if they are a member (memberIds contains 'user123').
     *   request.auth.uid == 'user123' && 'user123' in resource.data.memberIds
     * @allow (create) User with ID 'user123' can create a team (no specific membership requirement on create in this prototype).
     *   request.auth.uid == 'user123'
     * @allow (update, delete) User with ID 'user123' can update/delete a team if they are a member (memberIds contains 'user123').
     *   request.auth.uid == 'user123' && 'user123' in resource.data.memberIds
     * @deny (get, list) User with ID 'user456' cannot read a team if they are not a member (memberIds does not contain 'user456').
     *   request.auth.uid == 'user456' && !('user456' in resource.data.memberIds)
     * @deny (update, delete) User with ID 'user456' cannot update/delete a team if they are not a member (memberIds does not contain 'user456').
     *   request.auth.uid == 'user456' && !('user456' in resource.data.memberIds)
     * @principle Enforces shared access based on membership.
     */
    match /teams/{teamId} {
      function isMember(memberIds) {
          return request.auth != null && memberIds.hasAny([request.auth.uid]);
      }

      function isExistingMember(memberIds) {
        return isMember(memberIds) && resource != null;
      }

      allow get, list: if request.auth != null && isMember(resource.data.memberIds);
      allow create: if request.auth != null;
      allow update: if isExistingMember(resource.data.memberIds);
      allow delete: if isExistingMember(resource.data.memberIds);
    }

    /**
     * @description Enforces shared access for chat messages within a team based on team membership.
     * @path /teams/{teamId}/messages/{messageId}
     * @allow (get, list) User with ID 'user123' can read a chat message if they are a member of the team.
     *   request.auth.uid == 'user123' && get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds contains 'user123'
     * @allow (create) User with ID 'user123' can create a chat message if they are a member of the team.
     *   request.auth.uid == 'user123' && get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds contains 'user123'
     * @allow (update, delete) Not applicable for messages in this prototype (or should be restricted to the sender).
     *   false
     * @deny (get, list) User with ID 'user456' cannot read a chat message if they are not a member of the team.
     *   request.auth.uid == 'user456' && !(get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds contains 'user456')
     * @deny (create) User with ID 'user456' cannot create a chat message if they are not a member of the team.
     *   request.auth.uid == 'user456' && !(get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds contains 'user456')
     * @principle Enforces shared access for chat messages based on team membership.
     */
    match /teams/{teamId}/messages/{messageId} {
       function isTeamMember(teamId) {
        return request.auth != null && get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds.hasAny([request.auth.uid]);
      }

      allow get, list: if isTeamMember(teamId);
      allow create: if isTeamMember(teamId);
      allow update, delete: if false;
    }
  }
}