/**
 * @fileoverview Firestore Security Rules for the CrewUp platform.
 *
 * Core Philosophy:
 * This ruleset implements a hybrid security model, combining user-based ownership for profile data with role-based access for teams and opportunities.
 *
 * Data Structure:
 * - User profiles are stored in `/users/{userId}`, ensuring that only the authenticated user can read/write their own profile.
 * - Opportunities are stored in the `/opportunities/{opportunityId}` collection, where any user can list all opportunities. Only the opportunity creator can edit or delete an opportunity.
 * - Teams are stored in the `/teams/{teamId}` collection, with membership controlled via the `memberIds` array.
 * - Chat messages are stored as subcollections of teams (`/teams/{teamId}/messages/{messageId}`), accessible only to team members.
 *
 * Key Security Decisions:
 * - Users can only manage their own profiles.
 * - Opportunity listing is public, but modification is restricted to the author.
 * - Team access is controlled by team membership.
 * - Listing of user documents in `/users` is disallowed.
 *
 * Denormalization for Authorization:
 * - The `Opportunity` entity has an `authorId` field, denormalizing the user ID of the creator. This is used to authorize updates and deletes.
 * - The `Team` entity has a `memberIds` array, denormalizing the user IDs of team members. This is used to authorize access to team resources such as messages.
 *
 * Structural Segregation:
 * - Publicly listable opportunities are stored in the `/opportunities` collection, separate from private user data under `/users/{userId}`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles stored under /users/{userId}.
     * @path /users/{userId}
     * @allow (create) - User 'abc' can create their profile with ID 'abc' (isOwner).
     * @allow (get, update, delete) - User 'abc' can read/write their profile with ID 'abc' (isOwner).
     * @deny (create) - User 'def' cannot create a profile with ID 'abc' (not isOwner).
     * @deny (get, update, delete) - User 'def' cannot read/write profile with ID 'abc' (not isOwner).
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // isOwner(userId): Checks if the request is made by the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // isExistingOwner(userId): Check if the request is made by the existing owner of the document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // isSignedIn(): Checks if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure opportunity postings in the /opportunities/{opportunityId} collection.
     * @path /opportunities/{opportunityId}
     * @allow (get, list) - Any user can read/list opportunities.
     * @allow (create) - User 'abc' can create an opportunity with authorId 'abc'.
     * @allow (update, delete) - User 'abc' can update/delete an opportunity where resource.data.authorId == 'abc'.
     * @deny (create) - User 'def' cannot create an opportunity with authorId 'abc' (mismatched authorId).
     * @deny (update, delete) - User 'def' cannot update/delete an opportunity where resource.data.authorId == 'abc' (not the author).
     * @principle Allows public read access but restricts write access to the author.
     */
    match /opportunities/{opportunityId} {
      // isOwner(authorId): Checks if the request is made by the owner of the document.
      function isOwner(authorId) {
        return request.auth.uid == authorId;
      }

      // isExistingOwner(authorId): Check if the request is made by the existing owner of the document
      function isExistingOwner(authorId) {
        return isOwner(authorId) && resource != null;
      }

      // isSignedIn(): Checks if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Secure team information in the /teams/{teamId} collection.
     * @path /teams/{teamId}
     * @allow (get, list) - Any user can read/list teams.
     * @allow (create) - User 'abc' can create a team (no specific validation on creation in this prototype).
     * @allow (update, delete) - Only members of the team (where request.auth.uid is in resource.data.memberIds) can update/delete.
     * @deny (update, delete) - User 'def' cannot update/delete a team if they are not in resource.data.memberIds.
     * @principle Restricts write access to team members.
     */
    match /teams/{teamId} {
      // isTeamMember(memberIds): Checks if the current user is a member of the team.
      function isTeamMember(memberIds) {
        return request.auth.uid in memberIds;
      }

      // isExistingTeamMember(memberIds): Check if the request is made by an existing team member of the document
      function isExistingTeamMember(memberIds) {
        return isTeamMember(memberIds) && resource != null;
      }

      // isSignedIn(): Checks if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isExistingTeamMember(resource.data.memberIds);
      allow delete: if isSignedIn() && isExistingTeamMember(resource.data.memberIds);
    }

    /**
     * @description Secure chat messages for each team in the /teams/{teamId}/messages/{messageId} subcollection.
     * @path /teams/{teamId}/messages/{messageId}
     * @allow (get, list) - Only members of the parent team can read/list messages.
     * @allow (create) - Only members of the parent team can create messages with senderId matching their UID.
     * @allow (update, delete) - Only the sender of the message can update/delete it.
     * @deny (create) - User 'def' cannot create a message for team 'xyz' if they are not a member.
     * @deny (update, delete) - User 'def' cannot update/delete a message sent by user 'abc'.
     * @principle Restricts access to chat messages to team members and enforces ownership for modification.
     */
    match /teams/{teamId}/messages/{messageId} {
      // isTeamMember(teamId): Checks if the current user is a member of the parent team.
      function isTeamMember(teamId) {
        return request.auth.uid in get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds;
      }

      // isMessageSender(senderId): Checks if the current user is the sender of the message.
      function isMessageSender(senderId) {
        return request.auth.uid == senderId;
      }

      // isExistingMessageSender(senderId): Check if the request is made by the existing sender of the document
      function isExistingMessageSender(senderId) {
        return isMessageSender(senderId) && resource != null;
      }

      // isSignedIn(): Checks if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn() && isTeamMember(teamId);
      allow create: if isSignedIn() && isTeamMember(teamId) && request.resource.data.senderId == request.auth.uid;
      allow update: if isSignedIn() && isExistingMessageSender(resource.data.senderId);
      allow delete: if isSignedIn() && isExistingMessageSender(resource.data.senderId);
    }
  }
}