rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     * @allow (get) User with ID 'user123' can read their own profile.
     * @allow (update) User with ID 'user123' can update their own profile.
     * @allow (delete) User with ID 'user123' can delete their own profile.
     * @deny (create) User with ID 'user456' cannot create a profile with ID 'user123'.
     * @deny (get) User with ID 'user456' cannot read profile with ID 'user123'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId);
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to opportunity postings.
     * @path /opportunities/{opportunityId}
     * @allow (get) Any user can read any opportunity.
     * @allow (list) Any user can list opportunities.
     * @allow (create) User with ID 'user123' can create an opportunity with authorId 'user123'.
     * @allow (update) User with ID 'user123' can update their own opportunity (where authorId is 'user123').
     * @allow (delete) User with ID 'user123' can delete their own opportunity (where authorId is 'user123').
     * @deny (create) User with ID 'user456' cannot create an opportunity with authorId 'user123'.
     * @deny (update) User with ID 'user456' cannot update opportunity where authorId is 'user123'.
     * @principle Public read, owner-only writes for opportunities.
     */
    match /opportunities/{opportunityId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(authorId) {
        return request.auth.uid == authorId;
      }

       function isExistingOwner(authorId) {
        return isOwner(authorId);
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Controls access to team data.
     * @path /teams/{teamId}
     * @allow (get) User who is a member of the team can read the team data.
     * @allow (list) Not allowed.
     * @allow (create) User who is signed in can create a team.
     * @allow (update) User who is a member of the team can update the team data.
     * @allow (delete) Not allowed.
     * @deny (get) User who is not a member of the team cannot read the team data.
     * @deny (create) User who is not signed in cannot create a team.
     * @deny (update) User who is not a member of the team cannot update the team data.
     * @principle Shared access for team members.
     */
    match /teams/{teamId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isMember(teamId) {
        return request.auth.uid in get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds;
      }

      function isExistingMember(teamId) {
        return isMember(teamId);
      }

      allow get: if isSignedIn() && isMember(teamId);
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isExistingMember(teamId);
      allow delete: if false;
    }

    /**
     * @description Controls access to chat messages within a team.
     * @path /teams/{teamId}/messages/{messageId}
     * @allow (get) User who is a member of the team can read the message.
     * @allow (list) User who is a member of the team can list messages.
     * @allow (create) User who is a member of the team can create a message.
     * @allow (update) Not allowed.
     * @allow (delete) Not allowed.
     * @deny (get) User who is not a member of the team cannot read the message.
     * @deny (list) User who is not a member of the team cannot list messages.
     * @deny (create) User who is not a member of the team cannot create a message.
     * @principle Shared access for team members within a team chat.
     */
    match /teams/{teamId}/messages/{messageId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isMember(teamId) {
        return request.auth.uid in get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds;
      }

      allow get: if isSignedIn() && isMember(teamId);
      allow list: if isSignedIn() && isMember(teamId);
      allow create: if isSignedIn() && isMember(teamId);
      allow update: if false;
      allow delete: if false;
    }
  }
}