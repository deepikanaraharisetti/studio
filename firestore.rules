rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check if the incoming data for a user profile is valid
    function isValidUserProfile(data) {
      return data.uid == request.auth.uid &&
             data.displayName is string &&
             data.email is string &&
             data.photoURL is string || data.photoURL == null &&
             (data.bio is string || !('bio' in data)) &&
             (data.skills is list || !('skills' in data)) &&
             (data.interests is list || !('interests' in data));
    }
    
    // Helper function to check if the incoming data for an opportunity is valid
    function isValidOpportunity(data) {
        return data.ownerId == request.auth.uid &&
               data.title is string &&
               data.description is string &&
               data.requiredSkills is list &&
               data.roles is list &&
               data.teamMembers is list &&
               data.joinRequests is list &&
               data.createdAt is timestamp;
    }

    // Users can create their own profile, and can only read/update their own profile.
    match /users/{userId} {
      allow read, update, delete: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() && isOwner(userId) && isValidUserProfile(request.resource.data);
    }

    // Any authenticated user can read opportunities.
    // Users can only create opportunities for themselves.
    // Users can only update their own opportunities.
    match /opportunities/{opportunityId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isValidOpportunity(request.resource.data);
      allow update, delete: if isAuthenticated() && isOwner(resource.data.ownerId);

      // Chat messages can only be read/written by team members.
      match /messages/{messageId} {
        allow read, write: if isAuthenticated() && (request.auth.uid in resource.data.teamMembers || isOwner(resource.data.ownerId));
      }

      // Files can only be read/written by team members.
      match /files/{fileId} {
        allow read, write: if isAuthenticated() && (request.auth.uid in resource.data.teamMembers || isOwner(resource.data.ownerId));
      }
    }
  }
}
