/**
 * @fileoverview Firestore Security Rules for CrewUp Platform
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and shared-access models.
 * User profiles are strictly owned by the corresponding user. Opportunities are publicly readable but only editable by their creators.
 * Teams and their chat messages are accessible to team members.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only to the user.
 * - /opportunities/{opportunityId}: Opportunity postings, publicly readable, editable only by the author.
 * - /teams/{teamId}: Team information, accessible to team members.
 * - /teams/{teamId}/messages/{messageId}: Chat messages for each team, accessible to team members.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied.
 * - Public read access is granted to the `/opportunities` collection.
 * - Data validation is minimized to essential authorization and relational integrity checks for prototyping.
 *
 * Denormalization for Authorization:
 * - Opportunities have an `authorId` field, enabling quick ownership checks without additional reads.
 * - Teams have a `memberIds` array to define team membership for access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile document with id 'user123'.
     * @deny (create) User with UID 'user456' cannot create a profile document with id 'user123'.
     * @allow (get, list, update, delete) User with UID 'user123' can read, update, and delete their own profile document with id 'user123'.
     * @deny (get, list, update, delete) User with UID 'user456' cannot read, update, or delete the profile document with id 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data.id == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants public read access to opportunities, but restricts writes to the opportunity creator.
     * @path /opportunities/{opportunityId}
     * @allow (get, list) Any user (or unauthenticated user) can read the opportunity.
     * @allow (create) User with UID 'user123' can create an opportunity with authorId 'user123'.
     * @deny (create) User with UID 'user456' cannot create an opportunity with authorId 'user123'.
     * @allow (update, delete) User with UID 'user123' can update/delete opportunity with authorId 'user123'.
     * @deny (update, delete) User with UID 'user456' cannot update/delete opportunity with authorId 'user123'.
     * @principle Grants public read, enforces ownership for writes, validates authorId on create.
     */
    match /opportunities/{opportunityId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(authorId) {
        return isSignedIn() && request.auth.uid == authorId;
      }
       function isExistingOwner() {
        return isSignedIn() && resource.data.authorId == request.auth.uid;
      }

      allow get, list: if true;

      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner();
      allow delete: if isExistingOwner();
    }

    /**
     * @description Grants access to team documents to team members.
     * @path /teams/{teamId}
     * @allow (get, list) User with UID 'user123' can read team if 'user123' is in 'memberIds' array.
     * @deny (get, list) User with UID 'user456' cannot read team if 'user123' is in 'memberIds' array and 'user456' is not.
     * @allow (create) User with UID 'user123' can create a team.
     * @allow (update, delete) User with UID 'user123' can update/delete team if 'user123' is in 'memberIds' array.
     * @deny (update, delete) User with UID 'user456' cannot update/delete team if 'user123' is in 'memberIds' array.
     * @principle Enforces team membership for access to team documents.
     */
    match /teams/{teamId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isTeamMember() {
          return isSignedIn() && request.auth.uid in resource.data.memberIds;
      }

      allow get, list: if isTeamMember();

      allow create: if isSignedIn();
      allow update: if isTeamMember();
      allow delete: if isTeamMember();
    }

    /**
     * @description Grants access to chat messages within a team to team members.
     * @path /teams/{teamId}/messages/{messageId}
     * @allow (get, list) User with UID 'user123' can read message if 'user123' is a member of the team.
     * @deny (get, list) User with UID 'user456' cannot read message if 'user456' is not a member of the team.
     * @allow (create) User with UID 'user123' can create a message if 'user123' is a member of the team.
     * @allow (update, delete) User with UID 'user123' can update/delete message if 'user123' is a member of the team.
     * @deny (update, delete) User with UID 'user456' cannot update/delete message if 'user456' is not a member of the team.
     * @principle Enforces team membership for access to chat messages.
     */
    match /teams/{teamId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isTeamMember() {
          let team = get(/databases/$(database)/documents/teams/$(teamId)).data;
          return isSignedIn() && request.auth.uid in team.memberIds;
      }

      allow get, list: if isTeamMember();
      allow create: if isTeamMember();
      allow update: if isTeamMember();
      allow delete: if isTeamMember();
    }

    /**
     * @description  Denies access to the /requests collection due to "Missing or insufficient permissions" in the original error.
     * @path /requests
     * @deny (get, list, create, update, delete) All operations are denied on the /requests collection.
     * @principle  Denies access to prevent unauthorized data access based on reported error.
     */
    match /requests/{document=**} {
      allow read, write: if false;
    }
  }
}