/**
 * @fileoverview Firestore Security Rules for CrewUp platform.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of ownership-based access control for user profiles
 * and public read access with owner-only writes for opportunities. Team memberships and chat
 * messages are secured through shared access patterns, where team members have specific
 * permissions within their respective teams.
 *
 * Data Structure:
 * - /users/{userId}: Stores private user profile data, accessible only to the user.
 * - /opportunities/{opportunityId}: Stores publicly readable opportunity data, with create/update/delete
 *   access restricted to the opportunity creator.
 * - /teams/{teamId}: Stores team data, accessible to team members.
 * - /teams/{teamId}/messages/{messageId}: Stores chat messages, accessible to team members.
 *
 * Key Security Decisions:
 * - User listing is disabled to prevent unauthorized data scraping.
 * - Opportunities are publicly readable to maximize visibility but only writable by the creator.
 * - Team and chat message access is restricted to team members only.
 * - Data validation is minimized in this prototyping phase, focusing only on
 *   authorization and relational integrity.
 *
 * Denormalization for Authorization:
 * - Opportunities include an `authorId` field to enable simple ownership checks
 *   for write operations. This avoids the need for additional `get()` calls to
 *   determine the opportunity creator.
 * - Teams include a `memberIds` array to enable efficient membership checks for
 *   access to team-related data (teams and messages).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the requesting user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Requires authentication for certain operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource based on the provided userId.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces ownership-based access control.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the existing owner of the resource based on the provided userId and that the resource exists.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces ownership-based access control and resource existence before modification.
     */
    function isExistingOwner(userId) {
        return (isOwner(userId) && resource != null);
    }

    /**
     * @description Checks if the requesting user is a member of a team based on the provided team's memberIds array.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces shared access control for team resources.
     */
    function isTeamMember(memberIds) {
      return isSignedIn() && memberIds.hasAny([request.auth.uid]);
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) Signed-in user creating their own profile: request.auth.uid == 'user_abc' and request.resource.data.id == 'user_abc'.
     * @allow (get, update, delete) Signed-in user accessing their own profile: request.auth.uid == 'user_abc' and resource.data.id == 'user_abc'.
     * @deny (create) Signed-in user creating a profile for another user: request.auth.uid == 'user_abc' but request.resource.data.id != 'user_abc'.
     * @deny (get, update, delete) Signed-in user accessing another user's profile: request.auth.uid == 'user_abc' but resource.data.id != 'user_abc'.
     * @principle Enforces document ownership for user profiles, restricting access to the profile owner.
     */
    match /users/{userId} {
      // Only the user can read their own profile.
      allow get: if isOwner(userId);
      allow list: if false;

      // Only the user can create their own profile, and the ID must match.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;

      // Only the user can update their own profile. The id field must not change.
      allow update: if isExistingOwner(userId) && resource.data.id == request.resource.data.id;

      // Only the user can delete their own profile.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for opportunities.
     * @path /opportunities/{opportunityId}
     * @allow (get, list) Any user can read/list opportunities.
     * @allow (create) Signed-in user creating an opportunity with their ID as the authorId: request.auth.uid == 'user_abc' and request.resource.data.authorId == 'user_abc'.
     * @allow (update, delete) Signed-in user who is the author of the opportunity: request.auth.uid == 'user_abc' and resource.data.authorId == 'user_abc'.
     * @deny (create) Signed-in user creating an opportunity with another user's ID as the authorId: request.auth.uid == 'user_abc' but request.resource.data.authorId != 'user_abc'.
     * @deny (update, delete) Signed-in user who is not the author of the opportunity.
     * @principle Allows public reads for opportunities but restricts writes to the opportunity creator.
     */
    match /opportunities/{opportunityId} {
      // Anyone can read opportunities.
      allow get, list: if true;

      // Only signed-in users can create opportunities, and the authorId must match.
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;

      // Only the author can update or delete the opportunity.
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Rules for teams.
     * @path /teams/{teamId}
     * @allow (get, list) Signed-in user who is a member of the team: request.auth.uid is in resource.data.memberIds.
     * @allow (create) Signed-in user creating a team.
     * @allow (update, delete) Signed-in user who is a member of the team.
     * @deny (get, list) Signed-in user who is not a member of the team.
     * @principle Restricts access to team data to team members only.
     */
    match /teams/{teamId} {
      // Only team members can read teams.
      allow get, list: if isTeamMember(resource.data.memberIds);

      // Any signed-in user can create a team.
      allow create: if isSignedIn();

      // Only team members can update or delete the team.
      allow update: if isSignedIn() && isTeamMember(resource.data.memberIds);
      allow delete: if isSignedIn() && isTeamMember(resource.data.memberIds);
    }

    /**
     * @description Rules for chat messages.
     * @path /teams/{teamId}/messages/{messageId}
     * @allow (get, list) Signed-in user who is a member of the parent team: request.auth.uid is in get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds.
     * @allow (create) Signed-in user who is a member of the parent team: request.auth.uid is in get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds.
     * @allow (update, delete) Signed-in user who is a member of the parent team: request.auth.uid is in get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds.
     * @deny (get, list) Signed-in user who is not a member of the parent team.
     * @principle Restricts access to chat messages to team members only.
     */
    match /teams/{teamId}/messages/{messageId} {
      // Only team members can read messages.
      allow get, list: if isTeamMember(get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds);

      // Only team members can create messages.
      allow create: if isSignedIn() && isTeamMember(get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds);

      // Only team members can update or delete messages.
      allow update: if isSignedIn() && isTeamMember(get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds);
      allow delete: if isSignedIn() && isTeamMember(get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds);
    }
  }
}