/**
 * @fileoverview Firestore Security Rules for the CrewUp platform.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles,
 * public read access with owner-only writes for opportunities, and
 * shared access for teams and their associated chat messages.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /opportunities/{opportunityId}: Stores opportunity postings.
 * - /teams/{teamId}: Stores team information.
 * - /teams/{teamId}/messages/{messageId}: Stores chat messages for each team.
 *
 * Key Security Decisions:
 * - User profiles are private and accessible only to the owning user.
 * - Opportunities are publicly readable but only the author can modify them.
 * - Teams are accessible only to their members.
 * - Listing of user profiles is denied for privacy.
 *
 * Denormalization for Authorization:
 * - Opportunities contain an `authorId` field to simplify owner-only write checks.
 * - Teams contain a `memberIds` array to easily check team membership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     * @allow (get) User with ID 'user123' can read their own profile.
     * @allow (update) User with ID 'user123' can update their own profile.
     * @allow (delete) User with ID 'user123' can delete their own profile.
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     * @deny (get) User with ID 'user456' cannot read the profile of 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Only signed-in users can attempt actions.
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Do not allow listing of users
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to opportunity documents.
     * @path /opportunities/{opportunityId}
     * @allow (get) Any user can read an opportunity.
     * @allow (list) Any user can list opportunities.
     * @allow (create) User with ID 'user123' can create an opportunity with authorId 'user123'.
     * @allow (update) User with ID 'user123' can update an opportunity where they are the author.
     * @allow (delete) User with ID 'user123' can delete an opportunity where they are the author.
     * @deny (create) User with ID 'user123' cannot create an opportunity with authorId 'user456'.
     * @deny (update) User with ID 'user456' cannot update an opportunity where 'user123' is the author.
     * @principle Public read with owner-only writes.
     */
    match /opportunities/{opportunityId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.authorId == resource.data.authorId && resource.data.authorId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.authorId == request.auth.uid;
    }

    /**
     * @description Controls access to team documents.
     * @path /teams/{teamId}
     * @allow (get) User with ID 'user123' can read a team if they are a member.
     * @allow (list) Not applicable directly, but considered for future use.
     * @allow (create) Any signed-in user can create a team (membership managed in document).
     * @allow (update) User with ID 'user123' can update a team if they are a member.
     * @allow (delete) User with ID 'user123' can delete a team if they are a member.
     * @deny (get) User with ID 'user456' cannot read a team if they are not a member.
     * @deny (update) User with ID 'user456' cannot update a team if they are not a member.
     * @principle Shared access (closed collaborators) via memberIds array.
     */
    match /teams/{teamId} {
      allow get: if isSignedIn() && isTeamMember(teamId);
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isTeamMember(teamId);
      allow delete: if isSignedIn() && isTeamMember(teamId);
    }

    /**
     * @description Controls access to chat messages within a team.
     * @path /teams/{teamId}/messages/{messageId}
     * @allow (get) User with ID 'user123' can read a chat message if they are a member of the team.
     * @allow (list) User with ID 'user123' can list chat messages if they are a member of the team.
     * @allow (create) User with ID 'user123' can create a chat message if they are a member of the team.
     * @allow (update) Not applicable, chat messages should not be updated.
     * @allow (delete) Not applicable, chat messages should not be deleted.
     * @deny (create) User with ID 'user456' cannot create a chat message if they are not a member of the team.
     * @deny (get) User with ID 'user456' cannot read a chat message if they are not a member of the team.
     * @principle Shared access (closed collaborators) via team membership.
     */
    match /teams/{teamId}/messages/{messageId} {
      allow get, list: if isSignedIn() && isTeamMember(teamId);
      allow create: if isSignedIn() && isTeamMember(teamId);
      allow update, delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isTeamMember(teamId) {
    return request.auth.uid in get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds;
  }
}