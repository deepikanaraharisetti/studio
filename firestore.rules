/**
 * @fileoverview Firestore Security Rules for CrewUp Platform
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and a public-read,
 * owner-write model for opportunities. Teams and chat messages are secured based on
 * team membership.
 *
 * Data Structure:
 * - /users/{userId}: Stores private user profile data. Only the user can read/write their own profile.
 * - /opportunities/{opportunityId}: Stores opportunity postings. Publicly readable, but only the author can modify/delete.
 * - /teams/{teamId}: Stores team information. Access is restricted to team members.
 * - /teams/{teamId}/messages/{messageId}: Stores chat messages. Access is restricted to team members.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Opportunities are publicly readable.
 * - Teams are secured using a member list.
 * - Data types and optional fields are NOT validated in this prototyping phase.
 *
 * Denormalization for Authorization:
 * - Opportunities have an `authorId` field to simplify ownership checks for updates and deletes.
 * - Teams have a `memberIds` array to simplify membership checks for access to teams and their messages.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces strict user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) If the user ID in the path matches the authenticated user's ID.
     * @allow (get, list) If the user ID in the path matches the authenticated user's ID.
     * @allow (update, delete) If the user ID in the path matches the authenticated user's ID and the document exists.
     * @deny (create) If the user ID in the path does not match the authenticated user's ID.
     * @deny (get, list, update, delete) If the user is not authenticated.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing users is disallowed
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to opportunities, but restricts writes to the author.
     * @path /opportunities/{opportunityId}
     * @allow (get, list) Anyone can read the opportunities.
     * @allow (create) Only authenticated users can create opportunities, and the authorId must match the user's ID.
     * @allow (update, delete) Only the author of the opportunity can update or delete it, and the document must exist.
     * @deny (create) If the authorId does not match the user's ID.
     * @deny (update, delete) If the user is not the author or the document does not exist.
     * @principle Public read, owner-only writes, enforces author ownership.
     */
    match /opportunities/{opportunityId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(authorId) {
        return request.auth.uid == authorId;
      }

      function isExistingOwner(authorId) {
        return isOwner(authorId) && existsAfter(/databases/$(database)/documents/opportunities/$(opportunityId));
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.authorId == resource.data.authorId;
      allow delete: if isSignedIn() && request.resource.data.authorId == resource.data.authorId;
    }

    /**
     * @description Restricts access to teams to only team members.
     * @path /teams/{teamId}
     * @allow (get, list) If the user is a member of the team.
     * @allow (create) Only authenticated users can create teams.
     * @allow (update, delete) Only members can update/delete and the document exists.
     * @deny (get, list) If the user is not a member of the team.
     * @principle Shared access (closed collaborators), restricts access to team members.
     */
    match /teams/{teamId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isTeamMember(teamId) {
        return exists(/databases/$(database)/documents/teams/$(teamId)) && get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds.hasAny([request.auth.uid]);
      }

      function isExistingTeamMember(teamId) {
        return isTeamMember(teamId) && existsAfter(/databases/$(database)/documents/teams/$(teamId));
      }

      allow get: if isSignedIn() && isTeamMember(teamId);
      allow list: if false; // Listing teams is disallowed for now.
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isExistingTeamMember(teamId);
      allow delete: if isSignedIn() && isExistingTeamMember(teamId);
    }

    /**
     * @description Restricts access to chat messages to only team members.
     * @path /teams/{teamId}/messages/{messageId}
     * @allow (get, list) If the user is a member of the team.
     * @allow (create) If the user is a member of the team.
     * @allow (update, delete) If the user is a member of the team and the document exists.
     * @deny (get, list) If the user is not a member of the team.
     * @principle Shared access (closed collaborators), restricts access to team members for chat messages.
     */
    match /teams/{teamId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isTeamMember(teamId) {
        return exists(/databases/$(database)/documents/teams/$(teamId)) && get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds.hasAny([request.auth.uid]);
      }

       function isExistingTeamMember(teamId) {
        return isTeamMember(teamId) && existsAfter(/databases/$(database)/documents/teams/$(teamId)/messages/$(messageId));
      }

      allow get: if isSignedIn() && isTeamMember(teamId);
      allow list: if isSignedIn() && isTeamMember(teamId);
      allow create: if isSignedIn() && isTeamMember(teamId);
      allow update: if isSignedIn() && isExistingTeamMember(teamId);
      allow delete: if isSignedIn() && isExistingTeamMember(teamId);
    }
  }
}