/**
 * @fileoverview Firestore Security Rules for CrewUp platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and
 * allows public read access to opportunities while restricting write access to the owner.
 * Team and ChatMessage data are secured based on team membership.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Access is restricted to the owning user.
 * - /opportunities/{opportunityId}: Stores opportunity postings. Read access is public, write access is restricted to the author.
 * - /teams/{teamId}: Stores team information. Access is restricted to team members.
 * - /teams/{teamId}/messages/{messageId}: Stores chat messages for each team. Access is restricted to team members.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Opportunities are publicly readable but only the author can modify them.
 * - Team and ChatMessage data are only accessible to team members.
 * - Listing of user documents is allowed only for the owning user.
 *
 * Denormalization for Authorization:
 * - Opportunities have an `authorId` field to simplify owner-only write rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profile data, allowing only the owner to read and write.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile with matching userId.
     * @allow (get, list, update, delete) - Authenticated user accesses their own profile data.
     * @deny (create) - Authenticated user attempts to create a profile with a mismatched userId.
     * @deny (get, list, update, delete) - Authenticated user attempts to access another user's profile data.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secures opportunity postings, allowing public read access but restricting write access to the author.
     * @path /opportunities/{opportunityId}
     * @allow (get, list) - Any user can read opportunity data.
     * @allow (create) - Authenticated user creates an opportunity with their userId as authorId.
     * @allow (update, delete) - Authenticated user updates or deletes their own opportunity.
     * @deny (create) - Authenticated user attempts to create an opportunity with a mismatched authorId.
     * @deny (update, delete) - Authenticated user attempts to modify an opportunity they don't own.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /opportunities/{opportunityId} {
      function isOwner() {
        return request.auth.uid == resource.data.authorId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isOwner();
      allow delete: if isSignedIn() && isOwner();
    }

    /**
     * @description Secures team data, allowing access only to team members.
     * @path /teams/{teamId}
     * @allow (get, list) - Authenticated user is a member of the team.
     * @allow (create) - Authenticated user creates a team and is added as a member.
     * @allow (update, delete) - Authenticated user is a member of the team and can modify its data.
     * @deny (get, list, create, update, delete) - Authenticated user is not a member of the team.
     * @principle Enforces shared access through team membership.
     */
    match /teams/{teamId} {
      function isMember() {
          return request.auth.uid in resource.data.memberIds;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isMember();
      allow list: if false; // Listing teams is not allowed

      allow create: if isSignedIn();
      allow update: if isSignedIn() && isMember();
      allow delete: if isSignedIn() && isMember();
    }

    /**
     * @description Secures chat messages within a team, allowing access only to team members.
     * @path /teams/{teamId}/messages/{messageId}
     * @allow (get, list) - Authenticated user is a member of the parent team.
     * @allow (create) - Authenticated user is a member of the parent team and can send messages.
     * @allow (update, delete) - No updates or deletes are allowed on messages once created (messages are immutable).
     * @deny (get, list, create) - Authenticated user is not a member of the parent team.
     * @deny (update, delete) - All attempts to update or delete a message.
     * @principle Enforces shared access through team membership, ensures message immutability.
     */
    match /teams/{teamId}/messages/{messageId} {
      function isMember(teamId) {
        return get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds.hasAny([request.auth.uid]);
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isMember(teamId);
      allow list: if isSignedIn() && isMember(teamId);
      allow create: if isSignedIn() && isMember(teamId);
      allow update: if false;
      allow delete: if false;
    }
  }
}