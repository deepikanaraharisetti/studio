/**
 * @fileoverview Firestore Security Rules for the CrewUp platform.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and public-read with owner-write patterns.
 * User profiles are private and only accessible by the owning user. Opportunities are publicly readable,
 * but only the creator can modify them. Teams and ChatMessages are restricted to team members.
 *
 * Data Structure:
 * - /users/{userId}: Stores private user profile data, accessible only to the owning user.
 * - /opportunities/{opportunityId}: Stores publicly readable opportunity data, writable only by the author.
 * - /teams/{teamId}: Stores team data, accessible to team members.
 * - /teams/{teamId}/messages/{messageId}: Stores chat messages, accessible to team members.
 *
 * Key Security Decisions:
 * - User listing is disabled.
 * - Opportunities are publicly readable to maximize visibility.
 *
 * Denormalization for Authorization:
 * - Opportunities denormalize the `authorId` to enable efficient owner-only write rules.
 * - Teams denormalize the `memberIds` array to enable efficient read/write rules for team members.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Ensures the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the document.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
      return isSignedIn() && resource.data.id == userId;
    }

    /**
     * @description Checks if the requesting user is a member (has read access) to the team based on `memberIds`.
     */
    function isTeamMember(memberIds) {
        return isSignedIn() && memberIds is list && memberIds.hasAny([request.auth.uid]);
    }

    /**
     * @description Checks if the user is an admin. (Currently unused, but a placeholder for potential future role-based access.)
     */
    function isAdmin() {
        return false;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their profile at /users/user123
     * @allow (get, update, delete) - User with ID 'user123' can get, update, and delete their profile at /users/user123
     * @deny (create) - User with ID 'user456' cannot create a profile at /users/user123
     * @deny (get, update, delete) - User with ID 'user456' cannot get, update, or delete the profile at /users/user123
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Rules for opportunities.
     * @path /opportunities/{opportunityId}
     * @allow (get, list) - Any user can read any opportunity.
     * @allow (create) - User with ID 'user123' can create an opportunity with authorId 'user123'.
     * @allow (update, delete) - User with ID 'user123' can update/delete an opportunity where resource.data.authorId == 'user123'.
     * @deny (create) - User with ID 'user456' cannot create an opportunity with authorId 'user123'.
     * @deny (update, delete) - User with ID 'user456' cannot update/delete an opportunity where resource.data.authorId == 'user123'.
     * @principle Enforces public read access with owner-only writes.
     */
    match /opportunities/{opportunityId} {
      allow get, list: if true;

      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.authorId == request.auth.uid;
    }

    /**
     * @description Rules for teams.
     * @path /teams/{teamId}
     * @allow (get) - Team members can get a team.
     * @allow (list) - Not allowed.
     * @allow (create) - Only team members can create a team.
     * @allow (update) - Only team members can update a team.
     * @allow (delete) - Only team members can delete a team.
     * @deny (get) - User without ID in `memberIds` cannot get a team.
     * @deny (create, update, delete) - User without ID in `memberIds` cannot create/update/delete a team.
     * @principle Enforces shared access for a closed group of collaborators based on `memberIds`.
     */
    match /teams/{teamId} {
      allow get: if isSignedIn() && isTeamMember(resource.data.memberIds);
      allow list: if false;

      allow create: if isSignedIn() && request.resource.data.memberIds is list && request.resource.data.memberIds.hasAny([request.auth.uid]);
      allow update: if isSignedIn() && isTeamMember(resource.data.memberIds);
      allow delete: if isSignedIn() && isTeamMember(resource.data.memberIds);
    }

    /**
     * @description Rules for chat messages.
     * @path /teams/{teamId}/messages/{messageId}
     * @allow (get) - Team members can get a chat message.
     * @allow (list) - Team members can list chat messages.
     * @allow (create) - Only team members can create a chat message.
     * @allow (update) - Only the sender can update their message.
     * @allow (delete) - Only the sender can delete their message.
     * @deny (get, list) - User without ID in parent `team/memberIds` cannot get/list a chat message.
     * @deny (create, update, delete) - User without ID in parent `team/memberIds` cannot create/update/delete a chat message.
     * @principle Enforces shared access for a closed group of collaborators based on parent `team/memberIds`.
     */
    match /teams/{teamId}/messages/{messageId} {
        allow get: if isSignedIn() && get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds.hasAny([request.auth.uid]);
        allow list: if isSignedIn() && get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds.hasAny([request.auth.uid]);

        allow create: if isSignedIn() && get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds.hasAny([request.auth.uid]);
        allow update: if isSignedIn() && request.resource.data.senderId == request.auth.uid && get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds.hasAny([request.auth.uid]);
        allow delete: if isSignedIn() && resource.data.senderId == request.auth.uid && get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds.hasAny([request.auth.uid]);
    }
  }
}