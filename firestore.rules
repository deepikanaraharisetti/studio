/**
 * @fileoverview Firestore Security Rules for the CrewUp platform.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and shared-access models.
 * - User profiles are strictly private and accessible only to the owning user.
 * - Opportunities are publicly readable, but writes are restricted to the opportunity creator.
 * - Teams are accessible to team members.
 * - Chat messages within teams are only accessible to team members.
 *
 * Data Structure:
 * - /users/{userId}: Stores personal user profiles.
 * - /opportunities/{opportunityId}: Stores publicly listed opportunities.
 * - /teams/{teamId}: Stores team information.
 * - /teams/{teamId}/messages/{messageId}: Stores chat messages for each team.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access to opportunities allows for open discovery while maintaining author control.
 *
 * Denormalization for Authorization:
 * - Opportunities denormalize the author's user ID (`authorId`) to simplify ownership checks for writes.
 * - Teams denormalize member IDs (`memberIds`) to authorize access to teams and team-related data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile data, allowing only the owner to read and write.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user_abc' can create their profile at /users/user_abc.
     * @allow (get) - User with ID 'user_abc' can read their profile at /users/user_abc.
     * @allow (update) - User with ID 'user_abc' can update their profile at /users/user_abc.
     * @allow (delete) - User with ID 'user_abc' can delete their profile at /users/user_abc.
     * @deny (create) - User with ID 'user_xyz' cannot create a profile at /users/user_abc.
     * @deny (get) - User with ID 'user_xyz' cannot read the profile at /users/user_abc.
     * @deny (update) - User with ID 'user_xyz' cannot update the profile at /users/user_abc.
     * @deny (delete) - User with ID 'user_xyz' cannot delete the profile at /users/user_abc.
     * @principle Enforces strict user-ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows public reading of opportunities, but restricts creation, updating, and deletion to the opportunity author.
     * @path /opportunities/{opportunityId}
     * @allow (get) - Any user can read an opportunity.
     * @allow (list) - Any user can list opportunities.
     * @allow (create) - User with ID 'user_abc' can create an opportunity with authorId: 'user_abc'.
     * @allow (update) - User with ID 'user_abc' can update an opportunity they authored.
     * @allow (delete) - User with ID 'user_abc' can delete an opportunity they authored.
     * @deny (create) - User with ID 'user_xyz' cannot create an opportunity with authorId: 'user_abc'.
     * @deny (update) - User with ID 'user_xyz' cannot update an opportunity authored by 'user_abc'.
     * @deny (delete) - User with ID 'user_xyz' cannot delete an opportunity authored by 'user_abc'.
     * @principle Allows public read access while enforcing owner-only writes.
     */
    match /opportunities/{opportunityId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(authorId) {
        return isSignedIn() && request.auth.uid == authorId;
      }
      function isExistingOwner(authorId) {
          return isOwner(authorId) && resource != null;
      }

      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Controls access to team documents.  Allows access to team members.
     * @path /teams/{teamId}
     * @allow (get) - A team member can read team information.
     * @allow (list) - Listing teams is not allowed.
     * @allow (create) - Any signed in user can create a team
     * @allow (update) - A team member can update team information.
     * @allow (delete) - A team member can delete team information.
     * @deny (create) - An anonymous user can't create teams
     * @deny (update) - A non-team member cannot update team information.
     * @deny (delete) - A non-team member cannot delete team information.
     * @principle Enforces shared access based on team membership.
     */
    match /teams/{teamId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isMember(memberIds) {
        return isSignedIn() && memberIds.hasAny([request.auth.uid]);
      }

      function isExistingMember(memberIds) {
          return isMember(memberIds) && resource != null;
      }

      allow get: if isMember(resource.data.memberIds);
      allow list: if false;

      allow create: if isSignedIn();
      allow update: if isExistingMember(resource.data.memberIds);
      allow delete: if isExistingMember(resource.data.memberIds);
    }

    /**
     * @description Controls access to chat messages within a team. Allows access only to team members.
     * @path /teams/{teamId}/messages/{messageId}
     * @allow (get) - A team member can read chat messages.
     * @allow (list) - A team member can list chat messages.
     * @allow (create) - A team member can create chat messages.
     * @allow (update) - A team member can update chat messages.
     * @allow (delete) - A team member can delete chat messages.
     * @deny (create) - A non-team member cannot create chat messages.
     * @deny (update) - A non-team member cannot update chat messages.
     * @deny (delete) - A non-team member cannot delete chat messages.
     * @principle Enforces shared access based on team membership for chat messages.
     */
    match /teams/{teamId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isMember(teamId) {
        return isSignedIn() && get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds.hasAny([request.auth.uid]);
      }

      function isExistingMember(teamId) {
          return isMember(teamId) && resource != null;
      }

      allow get: if isMember(teamId);
      allow list: if isMember(teamId);
      allow create: if isMember(teamId);
      allow update: if isExistingMember(teamId);
      allow delete: if isExistingMember(teamId);
    }
  }
}