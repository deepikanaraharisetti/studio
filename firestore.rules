/**
 * @fileoverview Firestore Security Rules for CrewUp platform.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of ownership-based access and shared access patterns.
 * User data is strictly controlled by the owning user. Opportunities are publicly readable but writable only by the author.
 * Teams and their chat messages are restricted to team members.
 *
 * Data Structure:
 * - /users/{userId}: User profile information.
 * - /opportunities/{opportunityId}: Opportunity postings.
 * - /teams/{teamId}: Team information.
 * - /teams/{teamId}/messages/{messageId}: Chat messages for each team.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Opportunities are publicly readable, but only the author can modify them.
 * - Teams and their chat messages are accessible only to team members.
 * - Listing of user profiles is disallowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create a profile with document ID 'user123'.
     * @allow (get, list, update, delete) - User with UID 'user123' can read, update, or delete their own profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile with document ID 'user123'.
     * @deny (get, list, update, delete) - User with UID 'user456' cannot read, update, or delete the profile at /users/user123.
     * @principle Enforces strict user-ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Disallow listing of user profiles.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to opportunity postings.
     * @path /opportunities/{opportunityId}
     * @allow (get, list) - Any user can read/list opportunities.
     * @allow (create) - User with UID 'user123' can create an opportunity with authorId 'user123'.
     * @allow (update, delete) - User with UID 'user123' can update/delete their own opportunity where authorId is 'user123'.
     * @deny (create) - User with UID 'user456' cannot create an opportunity with authorId 'user123'.
     * @deny (update, delete) - User with UID 'user456' cannot update/delete the opportunity at /opportunities/opp123 created by 'user123'.
     * @principle Allows public read access but enforces owner-only write access for opportunities.
     */
    match /opportunities/{opportunityId} {
      function isOwner(authorId) {
        return request.auth != null && request.auth.uid == authorId;
      }

      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      allow update: if isOwner(resource.data.authorId) && resource != null;
      allow delete: if isOwner(resource.data.authorId) && resource != null;
    }

    /**
     * @description Controls access to team information.
     * @path /teams/{teamId}
     * @allow (get, list) - User with UID 'user123' can read team details if they are a member (memberIds contains 'user123').
     * @allow (create) - User with UID 'user123' can create a team (no specific restrictions in this prototype).
     * @allow (update, delete) - User with UID 'user123' can update/delete a team if they are a member (memberIds contains 'user123').
     * @deny (get, list) - User with UID 'user456' cannot read team details if they are not a member (memberIds does not contain 'user456').
     * @principle Restricts access to team information based on team membership.
     */
    match /teams/{teamId} {
      function isTeamMember(team) {
        return request.auth != null && team.memberIds.hasAny([request.auth.uid]);
      }

      allow get, list: if request.auth != null && isTeamMember(resource.data);
      allow create: if request.auth != null;
      allow update: if request.auth != null && isTeamMember(resource.data) && resource != null;
      allow delete: if request.auth != null && isTeamMember(resource.data) && resource != null;
    }

    /**
     * @description Controls access to chat messages within a team.
     * @path /teams/{teamId}/messages/{messageId}
     * @allow (get, list) - User with UID 'user123' can read chat messages if they are a team member (checked via get() on the parent team).
     * @allow (create) - User with UID 'user123' can create chat messages if they are a team member (checked via get() on the parent team).
     * @allow (update, delete) - Not applicable (chat messages are generally immutable/append-only, but included for completeness).
     * @deny (get, list) - User with UID 'user456' cannot read chat messages if they are not a team member.
     * @principle Restricts access to chat messages based on team membership, verified by checking the parent team document.
     */
    match /teams/{teamId}/messages/{messageId} {
      function isTeamMember() {
        return request.auth != null && get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds.hasAny([request.auth.uid]);
      }

      allow get, list: if isTeamMember();
      allow create: if isTeamMember();
      allow update: if false;
      allow delete: if false;
    }
  }
}