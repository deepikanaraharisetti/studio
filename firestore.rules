/**
 * @fileoverview Firestore Security Rules for CrewUp Platform
 *
 * Core Philosophy:
 * This ruleset enforces a mix of user-ownership and public-read/owner-write patterns, with specific rules for managing team collaborations.
 *
 * Data Structure:
 * - /users/{userId}:  User profile data, accessible only to the owning user.
 * - /opportunities/{opportunityId}: Publicly readable opportunities, writable only by the opportunity creator.
 * - /teams/{teamId}: Team data, with membership managed via the `memberIds` array.
 * - /teams/{teamId}/messages/{messageId}: Chat messages within teams, accessible to team members.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted to the /opportunities collection.
 *
 * Denormalization for Authorization:
 * - Opportunities have an `authorId` field to simplify ownership checks for writes.
 * - Teams have a `memberIds` array to streamline access control for team-related data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the owner can read/write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) User with ID 'user123' can read/write document 'user123'.
     * @deny (get, create, update, delete, list) User with ID 'user456' cannot read/write document 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure opportunity postings. Publicly readable, but only the author can modify.
     * @path /opportunities/{opportunityId}
     * @allow (get, list) Anyone can read/list opportunities.
     * @allow (create) User with ID 'user123' can create an opportunity with authorId: 'user123'.
     * @allow (update, delete) User with ID 'user123' can update/delete an opportunity they authored.
     * @deny (create) User with ID 'user123' cannot create an opportunity with authorId: 'user456'.
     * @deny (update, delete) User with ID 'user456' cannot update/delete an opportunity authored by 'user123'.
     * @principle Allows public reads with owner-only writes, enforcing document ownership for writes.
     */
    match /opportunities/{opportunityId} {
      function isOwner(authorId) {
        return request.auth.uid == authorId;
      }
       function isExistingOwner() {
        return get(/databases/$(database)/documents/opportunities/$(opportunityId)).data.authorId == request.auth.uid;
      }
      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      allow update: if request.auth != null && isExistingOwner();
      allow delete: if request.auth != null && isExistingOwner();
    }

    /**
     * @description Secure teams.  Members can read, and only members can write
     * @path /teams/{teamId}
     * @allow (get, list) User with ID 'user123' can read/list team if they are a member
     * @allow (create) User with ID 'user123' can create a team
     * @allow (update, delete) User with ID 'user123' can update/delete a team they are a member of
     * @deny (get, list) User with ID 'user456' cannot read/list team if they are not a member
     * @deny (update, delete) User with ID 'user456' cannot update/delete a team they are not a member of
     * @principle Restricts access to team data to team members.
     */
    match /teams/{teamId} {
       function isMember() {
        return request.auth.uid in resource.data.memberIds;
      }
       function isExistingMember() {
        return request.auth.uid in get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds;
      }
      allow get: if request.auth != null && isExistingMember();
      allow list: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null && isExistingMember();
      allow delete: if request.auth != null && isExistingMember();
    }

    /**
     * @description Secure chat messages within teams. Only team members can read/write messages.
     * @path /teams/{teamId}/messages/{messageId}
     * @allow (get, list) User with ID 'user123' can read/list messages if they are a team member.
     * @allow (create) User with ID 'user123' can create a message if they are a team member.
     * @allow (update, delete) User with ID 'user123' can update/delete a message if they are a team member.
     * @deny (get, list) User with ID 'user456' cannot read/list messages if they are not a team member.
     * @deny (create) User with ID 'user456' cannot create a message if they are not a team member.
     * @deny (update, delete) User with ID 'user456' cannot update/delete a message if they are not a team member.
     * @principle Restricts access to chat messages to team members.
     */
    match /teams/{teamId}/messages/{messageId} {
       function isTeamMember() {
          return request.auth.uid in get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds;
       }
      allow get: if request.auth != null && isTeamMember();
      allow list: if request.auth != null && isTeamMember();
      allow create: if request.auth != null && isTeamMember();
      allow update: if request.auth != null && isTeamMember();
      allow delete: if request.auth != null && isTeamMember();
    }
  }
}