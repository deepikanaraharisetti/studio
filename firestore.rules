/**
 * @fileoverview Firestore Security Rules for CrewUp platform.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of ownership-based and public-read/owner-write access control patterns,
 * ensuring users can manage their own data while allowing for public discoverability of opportunities.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`, ensuring private user data.
 * - Opportunities are stored in the top-level `/opportunities` collection with an `authorId` field
 *   linking back to the creator.
 * - Teams are stored in the top-level `/teams` collection, linking to opportunities and containing
 *   a list of `memberIds`.
 * - Chat messages are stored as a subcollection under teams (`/teams/{teamId}/messages`).
 *
 * Key Security Decisions:
 * - Users can only read/write their own profiles.
 * - Opportunities are publicly readable but only the creator can modify or delete them.
 * - Listing of user profiles is disallowed for privacy.
 *
 * Denormalization for Authorization:
 * - Opportunities include an `authorId` field to simplify ownership checks without requiring additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the existing resource.
     * @param {string} userId The user ID to compare against the resource's owner ID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces document ownership for writes.
     * @path /users/{userId}
     * @allow (create) User 'user123' with auth UID 'user123' can create their profile.
     * @deny (create) User 'user123' with auth UID 'user456' cannot create a profile with the wrong ID.
     * @allow (get, list, update, delete) User 'user123' with auth UID 'user123' can read/write their profile.
     * @deny (get, list, update, delete) User 'user123' with auth UID 'user456' cannot access another user's profile.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Disallow listing of user profiles for privacy.
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; // enforce immutability
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to opportunities, but restricts creation, updates, and deletion to the owner.
     * @path /opportunities/{opportunityId}
     * @allow (get, list) Any user (signed in or not) can view the opportunities.
     * @allow (create) User 'user123' with auth UID 'user123' can create an opportunity with authorId 'user123'.
     * @deny (create) User 'user123' with auth UID 'user123' cannot create an opportunity with authorId 'user456'.
     * @allow (update, delete) User 'user123' with auth UID 'user123' can update/delete their opportunity.
     * @deny (update, delete) User 'user456' with auth UID 'user456' cannot update/delete an opportunity they don't own.
     * @principle Enforces document ownership for writes.
     */
    match /opportunities/{opportunityId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Teams are open for any authenticated user to see, but limited update/delete to owner.
     * @path /teams/{teamId}
     */
    match /teams/{teamId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Messages inherit authorization from the team. Only team members can read/write messages.
     * @path /teams/{teamId}/messages/{messageId}
     */
    match /teams/{teamId}/messages/{messageId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}