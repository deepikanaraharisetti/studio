/**
 * @fileoverview Firestore Security Rules for CrewUp platform.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and an author-ownership model for opportunities.
 * Teams have a closed collaborator model, controlled by the 'memberIds' array.
 * Chat messages are scoped to teams, with access granted to team members only.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only by the user.
 * - /opportunities/{opportunityId}: Stores opportunity postings, publicly readable, but only editable by the author.
 * - /teams/{teamId}: Stores team information, with access controlled by team membership.
 * - /teams/{teamId}/messages/{messageId}: Stores chat messages, accessible only by team members.
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible by the owning user.
 * - Opportunities are publicly readable but only the author can modify them.
 * - Team membership controls access to team information and chat messages.
 * - Listing of user profiles is denied to prevent unauthorized data access.
 * - Enforces that the authorId field of an Opportunity must match the authenticated user when creating a new opportunity.
 *
 * Denormalization for Authorization:
 * - Opportunities include an `authorId` field to quickly check ownership for edits.
 * - Teams include a `memberIds` array to efficiently determine team membership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their profile.
     * @allow (get) User with ID 'user123' reads their profile.
     * @allow (update) User with ID 'user123' updates their profile.
     * @allow (delete) User with ID 'user123' deletes their profile.
     * @deny (create) User with ID 'user123' tries to create profile for 'user456'.
     * @deny (get) User with ID 'user123' tries to read profile of 'user456'.
     * @principle Enforces document ownership for writes and prevents unauthorized access.
     */
    match /users/{userId} {
      // Anyone can read a document if they are signed in
      allow get: if isSignedIn() && isOwner(userId);
      // Anyone can list a document if they are signed in
      allow list: if false;
      // Users can create their own profile.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      // Users can update their own profile.
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == request.resource.data.id;
      // Users can delete their own profile.
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure opportunity postings. Public read, owner-only writes.
     * @path /opportunities/{opportunityId}
     * @allow (get) Any user can read any opportunity.
     * @allow (list) Any user can list opportunities.
     * @allow (create) User with ID 'user123' creates an opportunity with authorId 'user123'.
     * @allow (update) User with ID 'user123' updates an opportunity where resource.data.authorId == 'user123'.
     * @allow (delete) User with ID 'user123' deletes an opportunity where resource.data.authorId == 'user123'.
     * @deny (create) User with ID 'user123' creates an opportunity with authorId 'user456'.
     * @deny (update) User with ID 'user123' updates an opportunity where resource.data.authorId != 'user123'.
     * @principle Public read, owner-only writes for opportunities. Enforces that the authorId field matches the authenticated user.
     */
    match /opportunities/{opportunityId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Secure teams. Access is controlled by team membership.
     * @path /teams/{teamId}
     * @allow (get) User with ID 'user123' reads team with 'user123' in memberIds.
     * @allow (list) User with ID 'user123' lists teams.
     * @allow (create) User with ID 'user123' creates a team with 'user123' in memberIds.
     * @allow (update) User with ID 'user123' updates a team with 'user123' in memberIds.
     * @allow (delete) User with ID 'user123' deletes a team with 'user123' in memberIds.
     * @deny (get) User with ID 'user123' tries to read team without 'user123' in memberIds.
     * @principle Shared Access (Closed Collaborators) for teams based on membership.
     */
    match /teams/{teamId} {
      allow get, list: if isSignedIn() && isTeamMember(resource.data.memberIds);
      allow create: if isSignedIn() && isTeamMember(request.resource.data.memberIds);
      allow update: if isSignedIn() && isTeamMember(resource.data.memberIds) && resource != null;
      allow delete: if isSignedIn() && isTeamMember(resource.data.memberIds) && resource != null;
    }

    /**
     * @description Secure chat messages. Access is controlled by team membership.
     * @path /teams/{teamId}/messages/{messageId}
     * @allow (get) User with ID 'user123' reads a message in team with 'user123' in memberIds.
     * @allow (list) User with ID 'user123' lists messages in team with 'user123' in memberIds.
     * @allow (create) User with ID 'user123' creates a message in team with 'user123' in memberIds.
     * @allow (update) User with ID 'user123' updates a message in team with 'user123' in memberIds.
     * @allow (delete) User with ID 'user123' deletes a message in team with 'user123' in memberIds.
     * @deny (get) User with ID 'user123' tries to read a message in a team without 'user123' in memberIds.
     * @principle Shared Access (Closed Collaborators) for chat messages based on team membership.
     */
    match /teams/{teamId}/messages/{messageId} {
      allow get, list: if isSignedIn() && isTeamMember(get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds);
      allow create: if isSignedIn() && isTeamMember(get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds) && request.resource.data.senderId == request.auth.uid;
      allow update: if isSignedIn() && isTeamMember(get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds) && request.resource.data.senderId == resource.data.senderId;
      allow delete: if isSignedIn() && isTeamMember(get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds) && request.resource.data.senderId == resource.data.senderId;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(ownerId) {
    return isSignedIn() && request.auth.uid == ownerId && resource != null;
  }

  function isTeamMember(memberIds) {
    return isSignedIn() && request.auth.uid in memberIds;
  }
}