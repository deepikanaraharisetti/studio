/**
 * @fileoverview Firestore Security Rules for CrewUp platform.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of ownership-based access and public-read/owner-write patterns.
 * User profiles are strictly controlled by the owning user. Opportunities are publicly readable but
 * only writable by their authors. Teams are publicly readable, and team messages are secured based on team membership.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, accessible only by the user.
 * - /opportunities/{opportunityId}: Opportunity postings, publicly readable, writable only by the author.
 * - /teams/{teamId}: Team data, publicly readable.
 * - /teams/{teamId}/messages/{messageId}: Chat messages within a team, access controlled by team membership.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - Opportunities are publicly readable to maximize visibility.
 *
 * Denormalization for Authorization:
 * - Opportunities denormalize the `authorId` to allow owner-based write rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the owning user can read or write their profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their own profile document at /users/user123.
     * @allow (get, update, delete) User with ID 'user123' reads/updates/deletes their own profile document at /users/user123.
     * @deny (create) User with ID 'user123' attempts to create a profile document at /users/anotherUser.
     * @deny (get, update, delete) User with ID 'user123' attempts to read/update/delete another user's profile at /users/anotherUser.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId; // Enforce immutability of userId on update
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secure opportunity postings. Read access is public, but create/update/delete are restricted to the author.
     * @path /opportunities/{opportunityId}
     * @allow (get, list) Any user can read/list opportunities.
     * @allow (create) User with ID 'user123' creates an opportunity with authorId: 'user123'.
     * @allow (update, delete) User with ID 'user123' updates/deletes an opportunity where opportunity.authorId == 'user123'.
     * @deny (create) User with ID 'user123' attempts to create an opportunity with authorId: 'anotherUser'.
     * @deny (update, delete) User with ID 'user123' attempts to update/delete another user's opportunity where opportunity.authorId == 'anotherUser'.
     * @principle Public read access with owner-only writes, enforcing document ownership for writes.
     */
    match /opportunities/{opportunityId} {
      function isOwner(authorId) {
        return request.auth.uid == authorId;
      }

      allow get, list: if true;

      allow create: if isSignedIn() && isOwner(request.resource.data.authorId);
      allow update: if isSignedIn() && isOwner(resource.data.authorId) && resource != null;
      allow delete: if isSignedIn() && isOwner(resource.data.authorId) && resource != null;
    }

    /**
     * @description Secure team data. Publicly readable.
     * @path /teams/{teamId}
     * @allow (get, list) Any user can read/list teams.
     * @deny (create, update, delete) No direct create/update/delete operations are allowed on teams (assumed to be managed via backend functions).
     * @principle Public read access.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secure chat messages within a team. Only team members can read or create messages.
     * @path /teams/{teamId}/messages/{messageId}
     * @allow (create) A user in the team's 'memberIds' array creates a new message.
     * @allow (get, list) A user in the team's 'memberIds' array reads/lists messages.
     * @deny (create) A user not in the team's 'memberIds' array attempts to create a message.
     * @deny (get, list) A user not in the team's 'memberIds' array attempts to read/list messages.
     * @principle Shared access (Closed Collaborators) based on team membership.
     */
    match /teams/{teamId}/messages/{messageId} {
      function isTeamMember(teamId) {
        return get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds.hasAny([request.auth.uid]);
      }

      allow get, list: if isSignedIn() && isTeamMember(teamId);
      allow create: if isSignedIn() && isTeamMember(teamId);
      allow update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}