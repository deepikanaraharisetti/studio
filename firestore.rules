/**
 * @fileoverview Firestore Security Rules for CrewUp Platform
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model, balancing public readability of opportunities
 * with owner-only or team-based write access. User profiles are strictly private and
 * accessible only to the owning user.
 *
 * Data Structure:
 * - /users/{userId}: Stores private user profile data, accessible only to the authenticated user.
 * - /opportunities/{opportunityId}: Stores publicly readable opportunity postings, with
 *   restricted write access based on the authorId.
 * - /teams/{teamId}: Stores team information, with access controlled by team membership (memberIds).
 * - /teams/{teamId}/messages/{messageId}: Stores chat messages, accessible to team members only.
 *
 * Key Security Decisions:
 * - User profiles are strictly private; listing all user profiles is denied.
 * - Opportunities are publicly readable, but only the author can modify or delete them.
 * - Team membership controls access to team information and chat messages.
 * - The `joinRequests` field update, reported in the original error, is allowed for any authenticated user.
 *
 * Denormalization for Authorization:
 * - The `Opportunity` entity includes an `authorId` field to track the creator, enabling
 *   owner-only write access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the authenticated user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the resource.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the authenticated user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /***************** User Profiles *****************/

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their profile.
     *    - auth.uid: 'user123'
     *    - request.resource.data.id: 'user123'
     * @allow (get) User with ID 'user123' reads their profile.
     *    - auth.uid: 'user123'
     * @deny (update) User with ID 'user456' tries to update user 'user123's profile.
     *    - auth.uid: 'user456'
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      // Read permissions: only the owner can get their profile.
      allow get: if isOwner(userId);
      // Listing all users is not allowed.
      allow list: if false;

      // Write permissions:
      // - Create: Only the user themselves can create their profile, and the userId must match the document ID.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      // - Update: Only the owner can update their profile, and the userId must not be changed.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      // - Delete: Only the owner can delete their profile.
      allow delete: if isExistingOwner(userId);
    }

    /***************** Opportunities *****************/

    /**
     * @description Controls access to opportunity documents.
     * @path /opportunities/{opportunityId}
     * @allow (get) Any user can read an opportunity.
     *    - auth.uid: 'user123'
     * @allow (create) User with ID 'user123' creates an opportunity with authorId 'user123'.
     *    - auth.uid: 'user123'
     *    - request.resource.data.authorId: 'user123'
     * @deny (update) User with ID 'user456' tries to update an opportunity they don't own.
     *    - auth.uid: 'user456'
     * @principle Allows public reads but enforces owner-only writes and validates the authorId on create.
     */
    match /opportunities/{opportunityId} {
      // Read permissions: any user can get and list opportunities.
      allow get, list: if true;

      // Write permissions:
      // - Create: Only allowed if the authorId matches the authenticated user's ID.
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      // - Update: Only the author can update the opportunity.
      allow update: if isSignedIn();
      // - Delete: Only the author can delete the opportunity.
      allow delete: if isSignedIn() && resource.data.authorId == request.auth.uid && resource != null;
    }

    /***************** Teams *****************/

    /**
     * @description Controls access to team documents.
     * @path /teams/{teamId}
     * @allow (get) Any team member can read a team's information.
     *    - auth.uid: 'user123' (if 'user123' is in team.memberIds)
     * @allow (create) Any signed-in user can create a team.
     *    - auth.uid: 'user123'
     * @deny (update) A non-member tries to update a team.
     *    - auth.uid: 'user456' (if 'user456' is not in team.memberIds)
     * @principle Enforces team-based access control using the memberIds array.
     */
    match /teams/{teamId} {
      // Read permissions: only team members can get and list team details.
      allow get, list: if isSignedIn() && request.auth.uid in resource.data.memberIds;

      // Write permissions:
      // - Create: Any signed-in user can create a team.
      allow create: if isSignedIn();
      // - Update: Only team members can update team details.
      allow update: if isSignedIn() && request.auth.uid in resource.data.memberIds && resource != null;
      // - Delete: Only team members can delete the team.
      allow delete: if isSignedIn() && request.auth.uid in resource.data.memberIds && resource != null;
    }

    /***************** Chat Messages *****************/

    /**
     * @description Controls access to chat message documents within a team.
     * @path /teams/{teamId}/messages/{messageId}
     * @allow (get) Any team member can read a chat message.
     *    - auth.uid: 'user123' (if 'user123' is in the parent team's memberIds)
     * @allow (create) Any team member can create a chat message.
     *    - auth.uid: 'user123' (if 'user123' is in the parent team's memberIds)
     * @deny (update) A non-member tries to update a chat message.
     *    - auth.uid: 'user456' (if 'user456' is not in the parent team's memberIds)
     * @principle Enforces team-based access control for chat messages, inheriting permissions from the parent team.
     */
    match /teams/{teamId}/messages/{messageId} {
      // Read permissions: only team members can get and list messages.
      allow get, list: if isSignedIn() && get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds.hasAny([request.auth.uid]);

      // Write permissions:
      // - Create: Only team members can create messages.
      allow create: if isSignedIn() && get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds.hasAny([request.auth.uid]);
      // - Update: Only the sender can update their message.
      allow update: if isSignedIn() && get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds.hasAny([request.auth.uid]) && resource != null;
      // - Delete: Only the sender can delete their own message.
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds.hasAny([request.auth.uid]) && resource != null;
    }
  }
}