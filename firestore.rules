/**
 * @fileoverview Firestore Security Rules for the CrewUp platform.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of ownership-based and shared-access security models.
 * User profiles are strictly private and accessible only to the owning user. Opportunities are publicly readable but writable only by the author. Teams and their associated chat messages are accessible to team members.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only to the user.
 * - /opportunities/{opportunityId}: Stores opportunity postings, publicly readable, writable only by the author.
 * - /teams/{teamId}: Stores team data, accessible only to team members.
 * - /teams/{teamId}/messages/{messageId}: Stores chat messages, accessible only to team members.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Opportunities are publicly readable, but only the author can modify or delete them.
 * - Teams and chat messages are only accessible to team members.
 * - Listing of user profiles is disallowed to protect user privacy.
 *
 * Denormalization for Authorization:
 * - Opportunities have an `authorId` field to enable owner-only write access.
 * - Teams have a `memberIds` array to enable shared access for team members.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' creates their own profile.
     *   Request: { "auth": { "uid": "user123" }, "resource.data": { "id": "user123", "firstName": "John", "lastName": "Doe", "email": "john.doe@example.com" } }
     * @allow (get, update, delete) - User with ID 'user123' accesses their own profile.
     *   Request: { "auth": { "uid": "user123" } }
     * @deny (create) - User with ID 'user456' attempts to create a profile for 'user123'.
     *   Request: { "auth": { "uid": "user456" }, "resource.data": { "id": "user123", "firstName": "John", "lastName": "Doe", "email": "john.doe@example.com" } }
     * @deny (get, update, delete) - User with ID 'user456' attempts to access profile of 'user123'.
     *   Request: { "auth": { "uid": "user456" } }
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the owner of an existing document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to opportunity postings.
     * @path /opportunities/{opportunityId}
     * @allow (get, list) - Any user can read opportunity postings.
     *   Request: { "auth": { "uid": "anyUser" } }
     * @allow (create) - User with ID 'user123' creates an opportunity with 'authorId' set to 'user123'.
     *   Request: { "auth": { "uid": "user123" }, "resource.data": { "authorId": "user123", "title": "Cool Project", "description": "Join us!" } }
     * @allow (update, delete) - User with ID 'user123' updates/deletes an opportunity where they are the author ('authorId' is 'user123').
     *   Request: { "auth": { "uid": "user123" } }
     * @deny (create) - User with ID 'user456' attempts to create an opportunity with 'authorId' set to 'user123'.
     *   Request: { "auth": { "uid": "user456" }, "resource.data": { "authorId": "user123", "title": "Cool Project", "description": "Join us!" } }
     * @deny (update, delete) - User with ID 'user456' attempts to update/delete an opportunity where 'authorId' is 'user123'.
     *   Request: { "auth": { "uid": "user456" } }
     * @principle Allows public read access, but restricts write access to the opportunity author.
     */
    match /opportunities/{opportunityId} {
      // Helper function to check if the authenticated user is the author of the opportunity.
      function isAuthor(authorId) {
        return request.auth != null && request.auth.uid == authorId;
      }

      // Helper function to check if the authenticated user is the author of an existing opportunity.
      function isExistingAuthor(authorId) {
        return isAuthor(authorId) && resource != null;
      }

      allow get, list: if true;
      allow create: if request.auth != null && isAuthor(request.resource.data.authorId);
      allow update: if request.auth != null && isExistingAuthor(resource.data.authorId);
      allow delete: if request.auth != null && isExistingAuthor(resource.data.authorId);
    }

    /**
     * @description Controls access to team information.
     * @path /teams/{teamId}
     * @allow (get, list) - User with ID 'user123' is a member of the team, so they can read the team data.
     *   Request: { "auth": { "uid": "user123" } } (where team document contains "memberIds": ["user123", "user456"])
     * @allow (create) - User with ID 'user123' can create a team.
     *   Request: { "auth": { "uid": "user123" }, "resource.data": { "name": "Dream Team", "description": "Best team ever!", "memberIds": ["user123"] } }
     * @allow (update, delete) - User with ID 'user123' is a member of the team, so they can update/delete the team data.
     *   Request: { "auth": { "uid": "user123" } } (where team document contains "memberIds": ["user123", "user456"])
     * @deny (get, list, update, delete) - User with ID 'user789' is NOT a member of the team, so they can't access the team data.
     *   Request: { "auth": { "uid": "user789" } } (where team document contains "memberIds": ["user123", "user456"])
     * @principle Restricts access to team data to only team members.
     */
    match /teams/{teamId} {
      // Helper function to check if the authenticated user is a member of the team.
      function isTeamMember(memberIds) {
        return request.auth != null && memberIds.hasAny([request.auth.uid]);
      }

      // Helper function to check if the authenticated user is a member of an existing team.
      function isExistingTeamMember(memberIds) {
        return request.auth != null && resource != null && memberIds.hasAny([request.auth.uid]);
      }

      allow get, list: if request.auth != null && isTeamMember(resource.data.memberIds);
      allow create: if request.auth != null;
      allow update: if request.auth != null && isExistingTeamMember(resource.data.memberIds);
      allow delete: if request.auth != null && isExistingTeamMember(resource.data.memberIds);
    }

    /**
     * @description Controls access to chat messages within a team.
     * @path /teams/{teamId}/messages/{messageId}
     * @allow (get, list) - User with ID 'user123' is a member of the team, so they can read the chat messages.
     *   Request: { "auth": { "uid": "user123" } } (where team document contains "memberIds": ["user123", "user456"])
     * @allow (create) - User with ID 'user123' is a member of the team, so they can create a chat message.
     *   Request: { "auth": { "uid": "user123" }, "resource.data": { "senderId": "user123", "message": "Hello team!" } } (where team document contains "memberIds": ["user123", "user456"])
     * @allow (update, delete) - User with ID 'user123' is a member of the team, so they can update/delete their own chat message.
     *   Request: { "auth": { "uid": "user123" } } (where team document contains "memberIds": ["user123", "user456"])
     * @deny (get, list, create, update, delete) - User with ID 'user789' is NOT a member of the team, so they can't access the chat messages.
     *   Request: { "auth": { "uid": "user789" } } (where team document contains "memberIds": ["user123", "user456"])
     * @principle Restricts access to chat messages to only team members.
     */
    match /teams/{teamId}/messages/{messageId} {
      // Helper function to check if the authenticated user is a member of the parent team.
      function isTeamMember(teamId) {
        return get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds.hasAny([request.auth.uid]);
      }

      allow get, list: if request.auth != null && isTeamMember(teamId);
      allow create: if request.auth != null && isTeamMember(teamId) && request.resource.data.senderId == request.auth.uid;
      allow update: if request.auth != null && isTeamMember(teamId) && resource.data.senderId == request.auth.uid;
      allow delete: if request.auth != null && isTeamMember(teamId) && resource.data.senderId == request.auth.uid;
    }
  }
}