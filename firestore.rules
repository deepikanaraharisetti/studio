/**
 * @fileoverview Firestore Security Rules for the CrewUp platform.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model. User profiles are strictly controlled by their respective owners.
 * Opportunities are publicly readable but writable only by their authors. Teams and associated chat messages are secured via shared access: only team members can read and write.
 *
 * Data Structure:
 * - /users/{userId}: Stores private user profile data, accessible only to the user themselves.
 * - /opportunities/{opportunityId}: Stores public opportunity postings, readable by anyone, but writable only by the author.
 * - /teams/{teamId}: Stores team data, including member lists.
 * - /teams/{teamId}/messages/{messageId}: Stores chat messages associated with a specific team; only team members can access.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted to the `/opportunities` collection, taking advantage of structural segregation for improved performance.
 * - Ownership is enforced through the `authorId` field on `Opportunity` documents.
 * - Team membership is managed through the `memberIds` array, enabling closed collaboration.
 *
 * Denormalization for Authorization:
 * - The `Opportunity` entity uses an `authorId` field to simplify ownership checks for write operations.
 * - The `Team` entity uses a `memberIds` array to efficiently manage team membership and secure associated chat messages.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces strict user-ownership for profile data. Only the user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user 'user_abc' can create their profile at /users/user_abc.
     * @allow (get, update, delete) - Authenticated user 'user_abc' can read/update/delete their profile at /users/user_abc.
     * @deny (create) - Authenticated user 'user_xyz' cannot create a profile at /users/user_abc.
     * @deny (get, update, delete) - Authenticated user 'user_xyz' cannot read/update/delete the profile at /users/user_abc.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to opportunity postings, but restricts write access to the author.
     * @path /opportunities/{opportunityId}
     * @allow (get, list) - Any user (or unauthenticated user) can read/list all opportunities.
     * @allow (create) - Authenticated user 'user_abc' can create a new opportunity with authorId 'user_abc'.
     * @allow (update, delete) - Authenticated user 'user_abc' can update/delete opportunity 'opp_123' if they are the author (authorId: 'user_abc').
     * @deny (create) - Authenticated user 'user_xyz' cannot create an opportunity with authorId 'user_abc'.
     * @deny (update, delete) - Authenticated user 'user_xyz' cannot update/delete opportunity 'opp_123' if the author is 'user_abc'.
     * @principle Public read, owner-only writes, enforces document ownership for writes.
     */
    match /opportunities/{opportunityId} {
      function isOwner(authorId) {
        return request.auth != null && request.auth.uid == authorId;
      }

      function isExistingOwner(authorId) {
        return isOwner(authorId) && resource != null;
      }

      allow get, list: if true;

      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Enforces team-based access control. Only team members can read or write team information.
     * @path /teams/{teamId}
     * @allow (get, list) - Authenticated user 'user_abc' can read/list team 'team_xyz' if they are a member (user_abc in memberIds).
     * @allow (create, update, delete) - Authenticated user 'user_abc' can create/update/delete team 'team_xyz' if they are a member (user_abc in memberIds).
     * @deny (get, list) - Authenticated user 'user_xyz' cannot read/list team 'team_xyz' if they are not a member.
     * @deny (create, update, delete) - Authenticated user 'user_xyz' cannot create/update/delete team 'team_xyz' if they are not a member.
     * @principle Shared access for team collaboration, enforces team membership for all operations.
     */
    match /teams/{teamId} {
      function isTeamMember(teamId) {
        return request.auth != null && request.auth.uid in get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds;
      }

      function isExistingTeamMember(teamId) {
        return isTeamMember(teamId) && resource != null;
      }

      allow get, list: if isTeamMember(teamId);

      allow create: if isTeamMember(teamId);
      allow update: if isExistingTeamMember(teamId);
      allow delete: if isExistingTeamMember(teamId);
    }

    /**
     * @description Enforces team-based access control for chat messages. Only team members can read or write chat messages within their team.
     * @path /teams/{teamId}/messages/{messageId}
     * @allow (get, list) - Authenticated user 'user_abc' can read/list messages in team 'team_xyz' if they are a member of the team.
     * @allow (create, update, delete) - Authenticated user 'user_abc' can create/update/delete messages in team 'team_xyz' if they are a member of the team.
     * @deny (get, list) - Authenticated user 'user_xyz' cannot read/list messages in team 'team_xyz' if they are not a member of the team.
     * @deny (create, update, delete) - Authenticated user 'user_xyz' cannot create/update/delete messages in team 'team_xyz' if they are not a member of the team.
     * @principle Shared access for team chat, enforces team membership for all operations.
     */
    match /teams/{teamId}/messages/{messageId} {
      function isTeamMember(teamId) {
        return request.auth != null && request.auth.uid in get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds;
      }

      function isExistingTeamMember(teamId) {
        return isTeamMember(teamId) && resource != null;
      }

      allow get, list: if isTeamMember(teamId);
      allow create: if isTeamMember(teamId);
      allow update: if isExistingTeamMember(teamId);
      allow delete: if isExistingTeamMember(teamId);
    }
  }
}