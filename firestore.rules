/**
 * @fileoverview Firestore Security Rules for the CrewUp platform.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model:
 *  - User profiles are strictly private and accessible only to the owning user.
 *  - Opportunities are publicly readable, but only the creator can modify them.
 *  - Teams are publicly readable.
 *  - Chat messages are secured to team members.
 *
 * Data Structure:
 * - /users/{userId}: Stores private user profile data, accessible only to the user.
 * - /opportunities/{opportunityId}: Stores public opportunity postings, write-protected by the author.
 * - /teams/{teamId}: Stores team data, including a member list.
 * - /teams/{teamId}/messages/{messageId}: Stores chat messages, accessible to team members.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied by the absence of a `list` rule on `/users`.
 * - Public read access is granted to the `/opportunities` collection.
 * - Strict ownership is enforced for user profiles under `/users/{userId}`.
 *
 * Denormalization for Authorization:
 * - Opportunities store the `authorId` to simplify write access control.
 * - Teams store the `memberIds` to control access to messages.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile at /users/user123.
     * @allow (get, update, delete) User with UID 'user123' can read/write their profile at /users/user123.
     * @deny (create, get, update, delete) User with UID 'user456' cannot access profile at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure opportunities. Anyone can read, but only the author can create, update, or delete.
     * @path /opportunities/{opportunityId}
     * @allow (get, list) Any user can read any opportunity.
     * @allow (create) User with UID 'user123' can create a new opportunity with authorId: 'user123'.
     * @allow (update, delete) User with UID 'user123' can update/delete opportunity with authorId: 'user123'.
     * @deny (create) User with UID 'user123' cannot create an opportunity with authorId: 'user456'.
     * @deny (update, delete) User with UID 'user456' cannot update/delete opportunity with authorId: 'user123'.
     * @principle Public read, owner-only writes, validates authorId on create.
     */
    match /opportunities/{opportunityId} {
      function isOwner(authorId) {
        return request.auth != null && request.auth.uid == authorId;
      }

      function isExistingOwner(authorId) {
          return isOwner(authorId) && resource != null;
      }

      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Secure teams.
     * @path /teams/{teamId}
     * @allow (get, list) Any user can read any team.
     * @allow (create) Any authenticated user can create a team.
     * @allow (update, delete) No one can update or delete a team.
     * @principle Open read, authenticated creation, immutable after creation.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if request.auth != null;
      allow update, delete: if false;
    }

    /**
     * @description Secure chat messages within teams. Only team members can read or create messages.
     * @path /teams/{teamId}/messages/{messageId}
     * @allow (get, list) User 'user123' can read messages if 'user123' is in the team's memberIds array.
     * @allow (create) User 'user123' can create messages if 'user123' is in the team's memberIds array.
     * @deny (get, list, create) User 'user456' cannot read/create messages if 'user456' is not in the team's memberIds array.
     * @principle Shared access via team membership, checks team membership on reads and writes.
     */
    match /teams/{teamId}/messages/{messageId} {
      function isTeamMember(teamId) {
        return get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds.hasAny([request.auth.uid]);
      }

      allow get, list: if request.auth != null && isTeamMember(teamId);
      allow create: if request.auth != null && isTeamMember(teamId);
      allow update, delete: if false;
    }

    /**
     * @description  Deny all access to /requests collection as requested by the user.
     * @path /requests
     * @deny (get, list, create, update, delete) All requests.
     * @principle Explicitly deny access to this collection.
     */
    match /requests/{document} {
        allow get, list, create, update, delete: if false;
    }
  }
}