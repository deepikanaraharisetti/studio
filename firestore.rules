/**
 * @fileoverview Firestore Security Rules for CrewUp platform.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of ownership-based access control and public read access with owner-only write access, depending on the collection.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`, providing path-based ownership.
 * - Opportunities are stored in the top-level `/opportunities` collection and are publicly readable but writable only by the owner.
 * - Teams are stored under the top-level `/teams/{teamId}` collection.
 * - Chat messages are stored in a subcollection `/teams/{teamId}/messages/{messageId}`.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied by the absence of a top-level `/users` collection rule.
 * - Public read access is granted to the `/opportunities` collection to allow browsing.
 * - Strict ownership is enforced for modifying opportunities.
 *
 * Denormalization for Authorization:
 * - Opportunities require the `authorId` field to match `request.auth.uid` on creation and updates.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to compare with the request's auth UID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

     /**
      * @description Checks if the user is the existing owner of the resource.
      *              Combines ownership check with existence check for updates and deletes.
      * @param {string} userId The user ID to compare with the resource's ownerId.
      * @return {bool} True if the user is the owner and the resource exists, false otherwise.
      */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile if request.auth.uid == 'user123'.
     * @allow (get) User with ID 'user123' can get their profile if request.auth.uid == 'user123'.
     * @allow (update) User with ID 'user123' can update their profile if request.auth.uid == 'user123'.
     * @allow (delete) User with ID 'user123' can delete their profile if request.auth.uid == 'user123'.
     * @deny (create) User with ID 'user456' cannot create profile for 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for opportunities.
     * @path /opportunities/{opportunityId}
     * @allow (create) User with ID 'user123' can create an opportunity with authorId 'user123'.
     * @allow (get) Any user can read any opportunity.
     * @allow (update) User with ID 'user123' can update opportunity with authorId 'user123'.
     * @allow (delete) User with ID 'user123' can delete opportunity with authorId 'user123'.
     * @deny (create) User with ID 'user456' cannot create an opportunity with authorId 'user123'.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /opportunities/{opportunityId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Rules for teams.
     * @path /teams/{teamId}
     */
    match /teams/{teamId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add collaborators validation.
      allow delete: if false; // TODO: Add collaborators validation.
    }

    /**
     * @description Rules for chat messages.
     * @path /teams/{teamId}/messages/{messageId}
     */
    match /teams/{teamId}/messages/{messageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add collaborators validation.
      allow delete: if false; // TODO: Add collaborators validation.
    }
  }
}